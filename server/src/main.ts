// This file was generated by NestJS CLI
// Do not modify this file manually

import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';
import { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';
import { ValidationPipe } from '@nestjs/common';
import { PrismaService } from './prisma/prisma.service';

async function bootstrap() {
  const app = await NestFactory.create(AppModule);

  // Enable CORS for frontend
  app.enableCors({
    origin: ['http://localhost:5173', 'http://localhost:3000'],
    credentials: true,
  });

  // Global validation pipe
  app.useGlobalPipes(new ValidationPipe({
    transform: true,
    whitelist: true,
    forbidNonWhitelisted: true,
  }));

  // Swagger documentation
  const config = new DocumentBuilder()
    .setTitle('Flowers API')
    .setDescription('API for managing flowers with real-time WebSocket updates')
    .setVersion('1.0')
    .addTag('flowers')
    .addTag('shops')
    .addTag('orders')
    .build();

  const document = SwaggerModule.createDocument(app, config);
  SwaggerModule.setup('api/docs', app, document);

  // Seed database if empty
  const prismaService = app.get(PrismaService);
  await seedDatabaseIfEmpty(prismaService);

  const port = process.env.PORT || 3000;
  await app.listen(port);
  
  console.log(`üöÄ Server running on http://localhost:${port}`);
  console.log(`üìö Swagger docs available at http://localhost:${port}/api/docs`);
}

async function seedDatabaseIfEmpty(prisma: PrismaService) {
  try {
    const shopCount = await prisma.shop.count();
    
    if (shopCount === 0) {
      console.log('üå± Database is empty, running seed...');
      
      // Import and run seed function
      const { exec } = await import('child_process');
      const { promisify } = await import('util');
      const execAsync = promisify(exec);
      
      try {
        await execAsync('npx tsx prisma/seed.ts');
        console.log('‚úÖ Database seeded successfully!');
      } catch (error) {
        console.error('‚ùå Error seeding database:', error);
      }
    } else {
      console.log('‚úÖ Database already has data, skipping seed.');
    }
  } catch (error) {
    console.error('‚ùå Error checking database:', error);
  }
}

bootstrap();